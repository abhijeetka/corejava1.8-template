name: Deployment-k8s-dev-testing

on:
  workflow_dispatch:
    inputs:
      build_number:
        default: '10'
        type: string
        required: true
      k8s_namespace:
        default: 'default'
        type: string
        required: true
      github_metadata:
        default: ''
        type: string
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'dev'
      url: 'https://test.com'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2


#configure kubeconfig
      - name: Configure Kubeconfig File
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ env.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

# Install Kubectl
      # - name: Install kubectl version
      #   env:
      #     KUBECTL_VERSION: "1.23.5-00"
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y apt-transport-https ca-certificates curl
      #     sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
      #     echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      #     sudo apt-get update
      #     sudo apt-get install -y kubectl=${{ env.KUBECTL_VERSION }} jq
      #     kubectl version
      - name: Install kubectl
        uses: Azure/setup-kubectl@v3
        with:
          version: latest
          

  #Install Helm
      # - name: Install helm
      #   env:
      #     HELM_VERSION: 3.8.0
      #   run: |
      #     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      #     chmod 700 get_helm.sh
      #     ./get_helm.sh -v v${{ env.HELM_VERSION }}
      #     helm version
      - name: Helm tool installer
        uses: Azure/setup-helm@v3
        with:
          version: 3.8.0
          

      - name: create-json for metadata
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "credentials.json"
          json: ${{ github.event.inputs.github_metadata }}

      - name: use output
        run: |
          echo "namespace=$(cat credentials.json | jq '.kubernetes.namespace')" >> $GITHUB_ENV
          echo ${{ env.namespace }}


      - name: use jemson
        run: |
          echo ${{ env.namespace }}
          

## Check the Namespace if null or default then create namespace depending upon the github repository.
#      - name: Determine Kubernetes Namespace
#        run: |
#          NAMESPACE="$($GITHUB_REPOSITORY | sed 's/\//_/g' )"
#          echo $NAMESPACE
#          echo REPO_NAME=$GITHUB_REPOSITORY | sed 's/\//_/g' >> $GITHUB_ENV
#          if [ "${{ github.event.inputs.k8s_namespace }}" == "default"  || "${{ github.event.inputs.k8s_namespace }}" == "" ]
#          then
#            NAMESPACE=$GITHUB_ACTION_REPOSITORY | sed 's/\//_/g'
#          else
#            NAMESPACE="${{ github.event.inputs.k8s_namespace }}"
#          fi
#          echo $NAMESPACE
#          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
#
#

# Create namespace
      - name: Create Namespace if not present
        run: |
          kubectl create namespace ${{ env.namespace }} || true


# Configure Docker Regsitry Credentials
      - name: Configure Docker Registry Credentials
        run: |
          kubectl -n ${{ env.namespace }} create secret docker-registry regcred --docker-server="${{ secrets.REGISTRY_URL }}" --docker-username="${{ secrets.DOCKER_USERNAME }}" --docker-password="${{ secrets.DOCKER_PASSWORD }}" || true



# task to install kubernetes helm repo
      - name: Install Helm Release
        run: |
          pwd
          ls -lart
          sed -i s+#SERVICE_NAME#+"abhijeet-test"+g ./helm_chart/values.yaml ./helm_chart/Chart.yaml
          kubectl create ns ${{ env.namespace }} || true
          helm upgrade --install "replace-me" -n ${{ env.namespace }} helm_chart --atomic --timeout 300s --set image.repository=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }} --set image.tag=${{ github.event.inputs.build_number }} --set image.registrySecret="regcred"  --set service.internalport="8080" 
          sleep 10


# task for getting the URL
      - name: Getting Live URL
        run: |
          release_name="replace-me"
          service_name="abhijeet-test"
          temp_service_name=$release_name+"-"+$service_name
          URL=$(kubectl get svc -n ${{ env.namespace }} | grep "fleetman-webapp" | awk '{print $4}')
          echo $URL
          if [ url != "<pending>" ] 
          then
                    echo "##\$@\$ http://$URL ##\$@\$"
          else
                    echo "access url has not generated"
          fi
          

#      - uses: actions-hub/kubectl@master
#        name: Create Namespace
#        env:
#          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#        with:
#          args: create namespace ${{ github.event.inputs.k8s_namespace }} || true

# Create Docker Registry Credentials

# study what needs to be installed
# steps
# check for promote
#
# create namespace - Done
# docker registry credentials Done
#
#         sed -i s+#SERVICE_NAME#+"$service"+g ./helm_chart/values.yaml ./helm_chart/Chart.yaml
#         kubectl create ns "$namespace_name" || true
#         helm upgrade --install "${generalPresent.repoName}" -n "$namespace_name" helm_chart --atomic --timeout 300s --set image.repository="$REGISTRY_URL" --set image.tag="$BUILD_TAG" --set image.registrySecret="regcred"  --set service.internalport="$SERVICE_PORT" -f Helm.yaml
#         sleep 10
#         kubectl rollout restart deploy "${generalPresent.repoName}-$service" -n "$namespace_name"
# The below is for live URL
#          env.temp_service_name = "$RELEASE_NAME-$service".take(63)
#          def url = sh (returnStdout: true, script: '''kubectl get svc -n "$namespace_name" | grep "$temp_service_name" | awk '{print $4}' ''').trim()
#          if (url != "<pending>") {
#          print("##\$@\$ http://$url ##\$@\$")
#          } else {
#          currentBuild.result = 'ABORTED'
#          error('Aborting the job as access url has not generated')
#          }
#          }
